#! /usr/bin/python
# -*- coding: iso-8859-1 -*-
# -----------------------------------------------------------------------------
# recordserver.py - start script for the recordserver
# -----------------------------------------------------------------------------
# $Id$
#
# This is the freevo tvserver (including epg server)
#
# -----------------------------------------------------------------------------
# Freevo - A Home Theater PC framework
# Copyright (C) 2002-2005 Krister Lagerstrom, Dirk Meyer, et al.
#
# Maintainer:    Dirk Meyer <dischi@freevo.org>
#
# Please see the file doc/CREDITS for a complete list of authors.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MER-
# CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# -----------------------------------------------------------------------------

# python imports
import os
import time
import sys
import getopt
import logging

# insert freevo path information
__site__ = '../lib/python%s.%s/site-packages' % sys.version_info[:2]
__site__ = os.path.normpath(os.path.join(os.path.dirname(__file__), __site__))
if not __site__ in sys.path:
    sys.path.insert(0, __site__)

# fix possible path problems (it crashes on some python installations)
if os.path.dirname(__file__) in sys.path:
    sys.path.remove(os.path.dirname(__file__))

# kaa imports
import kaa
import kaa.utils
import kaa.epg

# freevo core imports
import freevo.conf
import freevo.ipc

# read the config file
from freevo.tvserver.config import config


def usage(error_code):
    print 'freevo-tvserver [options]'
    print 'options:'
    print '--background        start tvserver in background'
    print '--stop              stop running tvserver'
    print '--interactive       interactive remote control'
    print '--help | -h         this message'
    sys.exit(error_code)


try:
    opts = [ 'background', 'stop', 'interactive', 'help' ]
    opts, args = getopt.getopt(sys.argv[1:], 'h', opts)
except getopt.GetoptError:
    usage(1)


for o, a in opts:
    if o == '--background':
        if kaa.utils.is_running('freevo-tvserver'):
            print 'tvserver already running'
            sys.exit(1)
        kaa.utils.daemonize()

    if o == '--stop':
        pid = kaa.utils.is_running('freevo-tvserver')
        if not pid:
            print 'tvserver not running'
            sys.exit(1)
        os.kill(pid, 15)
        sys.exit(0)

    if o == '--interactive':
        # import interactive mode
        from freevo.tvserver import interactive
        kaa.main()
        sys.exit(0)

    if o in ('--help', '-h'):
        usage(0)
        sys.exit(0)


# check and mark as running
if kaa.utils.is_running('freevo-tvserver'):
    print 'tvserver already running'
    sys.exit(1)

kaa.utils.set_running('freevo-tvserver')

# fork epg client.
read_fd, write_fd = os.pipe()
pid = os.fork()

if not pid:
    # This is the epg server.

    # logger setup
    log = logging.getLogger()
    log.setLevel(logging.INFO)

    # remove handler, we want to set the look and avoid
    # duplicate handlers
    for l in log.handlers[:]:
        log.removeHandler(l)

    handler = logging.FileHandler('%s/tvepg-%s' % (freevo.conf.LOGDIR, os.getuid()))
    handler.setFormatter(freevo.conf.formatter)
    log.addHandler(handler)

    # get logging object
    log = logging.getLogger('record')

    # set basic recording debug to info
    log.setLevel(getattr(logging, config.loglevel))

    try:
        guide = kaa.epg.Server(str(config.epg.database))
    except Exception, e:
        log.exception('unable to start epg server')

    # sync with tvserver
    os.write(write_fd, '0')
    os.close(read_fd)
    os.close(write_fd)

    # run epg server
    kaa.main()

    # print debug at the end
    log.info('terminate epg')
    sys.exit(0)



# At this point we are the main tvserver

# get logging object
log = logging.getLogger('record')

def start():
    """
    Start tvserver.
    """
    # import config. At this point we are conncted to the epg. This also means that
    # the epg server already opened the config file and maybe wrote it.
    from freevo.tvserver.config import config

    # set basic recording debug to info
    log.setLevel(getattr(logging, config.loglevel))

    # import recordserver
    from freevo.tvserver.server import RecordServer

    # start recordserver
    server = RecordServer()

    # get mbus address for epg settings
    mbus = freevo.ipc.Instance('tvserver')

    auth = mbus.cfg.hashkey.strip()
    host = mbus.addr['id'][mbus.addr['id'].find('@')+1:]
    port = epg.server.rpc('server.start', host + ':0', auth)
    while not port.is_finished:
        # FIXME: add this during runtime!
        kaa.notifier.step()
    port = port()[1]

    # make epg information public
    server.epgaddr = (host, port)


# sync with epgserver
os.close(write_fd)
if not len(os.read(read_fd, 1)):
    log.error('unable to start epg server')
    sys.exit(1)
os.close(read_fd)

# connect to the epg at client side
epg = kaa.epg.connect('epg')
epg.signals['connected'].connect_once(start)

kaa.main()

# kill epg server
try:
    os.kill(pid, 15)
except (OSError, IOError):
    log.error('failed to terminate epg server')

# print debug at the end
log.error('terminate')
