#! /usr/bin/python
# -*- coding: iso-8859-1 -*-
# -----------------------------------------------------------------------------
# freevo-epg - This process can be used to start a persistant EPG server and
#              to also do EPG client operations like updating the database 
#              ala tv_grab, searching from the command line, etc.
# -----------------------------------------------------------------------------
# $Id: $
#
# -----------------------------------------------------------------------------
# Freevo - A Home Theater PC framework
# Copyright (C) 2002-2005 Krister Lagerstrom, Dirk Meyer, et al.
#
# Maintainers:    Dirk Meyer <dischi@freevo.org>
#                 Rob Shortt <rob@tvcentric.com>
#
# Please see the file doc/CREDITS for a complete list of authors.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MER-
# CHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# -----------------------------------------------------------------------------

# python imports
import logging
import os
import shutil
import sys
import textwrap
import time

# insert freevo path information
__site__ = '../lib/python%s.%s/site-packages' % sys.version_info[:2]
__site__ = os.path.normpath(os.path.join(os.path.dirname(__file__), __site__))
if not __site__ in sys.path:
    sys.path.insert(0, __site__)

# kaa imports
import kaa
import kaa.notifier

import freevo.conf
import freevo.ipc

# get logging object
log = logging.getLogger('epg')

# set log level TODO: get and do this in config
log.setLevel(logging.DEBUG)

TVSERVER = {'type': 'home-theatre', 'module': 'tvserver'}




def search():

    guide = kaa.epg.guide

    t0 = time.time()
    if len(sys.argv) > 2:
        keywords = " ".join(sys.argv[2:])
        print "Results for '%s':" % keywords
        programs = guide.search(keywords = keywords)
        # Sort by start time
        programs.sort(lambda a, b: cmp(a.start, b.start))
    else:
        print "All programs currently playing:"
        programs = guide.search(time = (time.time(), time.time()+7200))
        # Sort by channel
        programs.sort(lambda a, b: cmp(a.channel.tuner_id, b.channel.tuner_id))
    t1 = time.time()

    for program in programs:
        start_time = time.strftime("%a %H:%M", time.localtime(program.start))
        print "  %s (%s): %s" % (program.channel.name.encode('latin-1'), start_time, program.title.encode('latin-1'))
        if program.description:
            print "\t* " + "\n\t  ".join(textwrap.wrap(program.description.encode('latin-1'), 60))

    print "- Queried %d programs; %s results; %.04f seconds" % \
          (guide.get_num_programs(), len(programs), t1-t0)
    sys.exit(0)


def list_channels():
    channels = kaa.epg.get_channels()
    channels.sort(lambda a, b: cmp(a.name, b.name))
    print 'Channels:'
    for c in channels:
        print '', c.name
    sys.exit(0)


if len(sys.argv) <= 1 or sys.argv[1] not in ['update', 'search', 'channels']:
    print
    print 'usage: %s <options> <args>' % sys.argv[0]
    print 'options:'
    print '         update   - Update EPG with XMLTV or other sources.'
    print '         search   - Search EPG for programs use args for search.'
    print '         channels - List all channels.'
    print '         help     - This message.'
    print
    print ' With no options it will start an EPG server.'
    print ' Be sure to check /etc/freevo/epg.conf for available config options.'
    print
    sys.exit(0)

    
# connect to tvserver
mbus = freevo.ipc.Instance('freevo')
mbus.connect('freevo.ipc.tvserver')

if sys.argv[1] == 'update':
    mbus.tvserver.epg.signals['connected'].connect(update_guide)

elif sys.argv[1] == 'search':
    mbus.tvserver.epg.signals['connected'].connect(search)

elif sys.argv[1] == 'channels':
    mbus.tvserver.epg.signals['connected'].connect(list_channels)

kaa.main()
sys.exit(0)
